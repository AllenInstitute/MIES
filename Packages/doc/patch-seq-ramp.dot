digraph G {
    fontname="sans-serif";
    ratio="0,01";
    center="true";
    compound="true";
    rank="same";
    penwidth="0.1";
    edge [comment="Wildcard edge",
          fontname="sans-serif",
          fontsize=10,
          colorscheme="blues3",
          color=2,
          fontcolor=3];
    node [fontname="serif",
          fontsize=13,
          fillcolor="1",
          colorscheme="blues4",
          color="2",
          fontcolor="4",
          style="filled"];
    "Start DAQ/RA";
    "Mid Sweep Event";
    "Post Set Event";
    "Post Sweep Event";
    "Post DAQ Event";
    "Start DAQ/RA" -> "Prepare DAQ Event";
    "Start DAQ/RA" -> "Post Set Event";
    "Start DAQ/RA" -> "Post Sweep Event";
    "Start DAQ/RA" -> "Post DAQ Event";
    subgraph cluster_preDAQ {
        color="invis";
        edge [comment="Wildcard node added automatic in EG."];
        node [comment="Wildcard node added automatic in EG."];
        "Prepare DAQ Event";
        "Check if only one headstage";
        "Enable \"TP during ITI\"";
        "Enable \"Autobias\"";
        "Enable \"Multidevice DAQ\"";
        "Enable \"Inserted TP\"";
        "Stimset is longer than 1.5s";
        "Valid Autobias voltage (finite and non-zero)";
        "Disable \"dDAQ\"/\"oodDAQ\"";
        "Stimset has at least three sweeps";
        "Set DAScale to 1pA";
        "Set ITI to zero";
        "Stimset is large enough";
        "Check if mode is IC";
        "Enable \"Repeated Acquisition\"";
        "Check if no TTL channels are active";
        "All checks passed";
        "Abort";
        "Prepare DAQ Event" -> "Enable \"Autobias\"";
        "Prepare DAQ Event" -> "Enable \"Inserted TP\"";
        "Prepare DAQ Event" -> "Enable \"TP during ITI\"";
        "Prepare DAQ Event" -> "Valid Autobias voltage (finite and non-zero)";
        "Prepare DAQ Event" -> "Enable \"Multidevice DAQ\"";
        "Prepare DAQ Event" -> "Disable \"dDAQ\"/\"oodDAQ\"";
        "Prepare DAQ Event" -> "Stimset is longer than 1.5s";
        "Prepare DAQ Event" -> "Check if only one headstage";
        "Prepare DAQ Event" -> "Set ITI to zero";
        "Prepare DAQ Event" -> "Set DAScale to 1pA";
        "Prepare DAQ Event" -> "Stimset has at least three sweeps";
        "Prepare DAQ Event" -> "Stimset is large enough";
        "Prepare DAQ Event" -> "Check if mode is IC";
        "Prepare DAQ Event" -> "Enable \"Repeated Acquisition\"";
        "Prepare DAQ Event" -> "Check if no TTL channels are active";
        "Stimset has at least three sweeps" -> "All checks passed";
        "Check if only one headstage" -> "All checks passed";
        "Stimset is longer than 1.5s" -> "All checks passed";
        "Valid Autobias voltage (finite and non-zero)" -> "All checks passed";
        "Stimset is large enough" -> "All checks passed";
        "Check if mode is IC" -> "All checks passed";
        "Check if no TTL channels are active" -> "All checks passed";
        "All checks passed" -> "Abort"  [label="No"];
        "Post DAQ Event" -> "Update Dashboard";
        "All required analysis parameters present?\nSamplingMultiplier: variable";
        "Prepare DAQ Event" -> "All required analysis parameters present?\nSamplingMultiplier: variable";
        "All required analysis parameters present?\nSamplingMultiplier: variable" -> "All checks passed";
    }

    "Start DAQ/RA" -> "Mid Sweep Event";
    "Mark set as passed if 3 sweeps passed, as failure otherwise";
    "Post Set Event" -> "Mark set as passed if 3 sweeps passed, as failure otherwise";
    "Last Sweep passed?";
    "Check if 3 sweeps passed from RA cycle";
    "Skip to end of active set";
    "Skip to end";
    "Post Sweep Event" -> "Last Sweep passed?";
    "Last Sweep passed?" -> "Check if 3 sweeps passed from RA cycle"  [label="Yes"];
    "Check if 3 sweeps passed from RA cycle" -> "Skip to end of active set"  [label="Yes"];
    "Check if the Set can still pass";
    "Last Sweep passed?" -> "Check if the Set can still pass"  [label="No"];
    "Check if the Set can still pass" -> "Skip to end"  [label="No"];
    "BL QC passed?";
    "Mid Sweep Event" -> "BL QC passed?";
    "Grab next completely acquired chunk (500ms) of stimset baseline";
    "BL QC passed?" -> "Grab next completely acquired chunk (500ms) of stimset baseline"  [label="No"];
    "Baseline chunk type";
    "Chunk already evaluated?";
    "Grab next completely acquired chunk (500ms) of stimset baseline" -> "Chunk already evaluated?"  [label="Have one"];
    "Grab next completely acquired chunk (500ms) of stimset baseline" -> "Last chunk?"  [label="None left"];
    "Last chunk?" -> "Mark Sweep/BL QC as failed"  [label="Yes"];
    "Chunk already evaluated?" -> "Grab next completely acquired chunk (500ms) of stimset baseline"  [label="Yes"];
    "Chunk already evaluated?" -> "Baseline chunk type"  [label="No"];
    "Check RMS short";
    "Check RMS long";
    "Check target voltage [1]";
    "Check target voltage [2]";
    "Baseline chunk type" -> "Check RMS short"  [label="pre pulse"];
    "Check RMS short" -> "Check RMS long"  [label="Passed"];
    "Mark Sweep/BL QC as passed";
    "Mark Sweep/BL QC as failed";
    "Check RMS short" -> "Mark Sweep/BL QC as failed"  [label="Failed"];
    "Check RMS long" -> "Mark Sweep/BL QC as failed"  [label="Failed"];
    "Check RMS long" -> "Check target voltage [1]"  [label="Passed"];
    "Mark chunk as passed/failed [1]";
    "Check target voltage [1]" -> "Mark chunk as passed/failed [1]";
    "Early sweep stop, repurpose ITI and add 10s to ITI";
    "Mark chunk as passed/failed [1]" -> "Early sweep stop, repurpose ITI and add 10s to ITI"  [label="Failed"];
    "Baseline chunk type" -> "Check target voltage [2]"  [label="post pulse"];
    "Check target voltage [2]" -> "Mark chunk as passed/failed [2]";
    "Mark chunk as passed/failed [2]" -> "Grab next completely acquired chunk (500ms) of stimset baseline"  [label="Failed"];
    "Mark chunk as passed/failed [2]" -> "Mark Sweep/BL QC as passed"  [label="Passed"];
    "Mark Sweep/BL QC as passed" -> "Early Sweep stop";
    "Mark Sweep/BL QC as failed" -> "Early Sweep stop";
    "Mark chunk as passed/failed [1]" -> "Grab next completely acquired chunk (500ms) of stimset baseline"  [label="Passed"];
    "Search spike result in labnotebook";
    "Search spike result in labnotebook" -> "Get pulse duration from labnotebook (calculate if not present)"  [label="Not Found"];
    "Mid Sweep Event" -> "Search spike result in labnotebook";
    "After pulse onset";
    "Get pulse duration from labnotebook (calculate if not present)" -> "After pulse onset";
    "Requested number of spikes detected?\n(x range: pulse onset to end of sweep\ny condition: max above 0.01mV)";
    "Requested number of spikes detected?\n(x range: pulse onset to end of sweep\ny condition: max above 0.01mV)" -> "After pulse"  [label="No"];
    "After pulse" -> "Write spike result \"failed\" into LBN"  [label="Yes"];
    "After pulse onset" -> "Requested number of spikes detected?\n(x range: pulse onset to end of sweep\ny condition: max above 0.01mV)"  [label="Yes"];
    "Write spike result (true/false) into labnotebook";
    "Requested number of spikes detected?\n(x range: pulse onset to end of sweep\ny condition: max above 0.01mV)" -> "Write spike result (true/false) into labnotebook"  [label="Yes"];
    "Write spike position in ms into labnotebook";
    "Set DA channel to zero from here to the end\n(implies DAQ restart)";
    "Write spike position in ms into labnotebook" -> "Set DA channel to zero from here to the end\n(implies DAQ restart)";
    "Set AD channel to zero for the duration of the DAQ restart";
    "Set DA channel to zero from here to the end\n(implies DAQ restart)" -> "Set AD channel to zero for the duration of the DAQ restart";
    "Recalculate pulse duration and\nstore in labnotebook";
    "Set AD channel to zero for the duration of the DAQ restart" -> "Recalculate pulse duration and\nstore in labnotebook";
    "Write spike result (true/false) into labnotebook" -> "Write spike position in ms into labnotebook";
}
